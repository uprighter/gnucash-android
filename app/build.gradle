import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'

def versionMajor = 2
def versionMinor = 4
def versionPatch = 0
def versionBuild = 3

static def buildTime() {
    def df = new SimpleDateFormat("yyyyMMdd HH:mm 'UTC'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

static def gitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

android {
    compileSdk = 35
    defaultConfig {
        applicationId "org.gnucash.pocket"
        minSdk = 21
        targetSdk = 34
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        resValue "string", "app_version_name", "${versionName}"
        resValue "string", "app_minor_version", "${versionMinor}"
        resValue "string", "app_playstore_url", "market://details?id=${applicationId}"
        buildConfigField "boolean", "CAN_REQUEST_RATING", "false"
        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
        buildConfigField "boolean", "GOOGLE_GCM", "false"

        testInstrumentationRunner "org.gnucash.android.test.ui.util.GnucashAndroidTestRunner"
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/NOTICE', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'LICENSE.txt', 'META-INF/NOTICE.txt']
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "GnucashAndroid_v${variant.versionName}.apk"
        }
    }

    signingConfigs {
        debug {
            storeFile file("../debug.keystore")
        }

        if (project.hasProperty("RELEASE_STORE_FILE")) {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        //todo re-enable proguard and test coverage
        release {
//            minifyEnabled true
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
        debug {
            debuggable true
            minifyEnabled false
//            testCoverageEnabled true
            signingConfig signingConfigs.debug
        }
    }
    lint {
        abortOnError false
    }

    flavorDimensions "stability"

    productFlavors {
        development {
            isDefault = true
            applicationIdSuffix '.devel'
            versionName "${versionMajor}.${versionMinor}.${versionPatch}-dev${versionBuild}_r${gitSha()}"
            resValue "string", "app_name", "GnuCash dev"
            resValue "string", "app_version_name", "${versionName}"

            buildConfigField "String", "DROPBOX_APP_KEY", "\"dhjh8ke9wf05948\""
            manifestPlaceholders.dropbox_app_key = "db-dhjh8ke9wf05948"

            ext.useGoogleGcm = false
        }

        beta {
            versionName "${versionMajor}.${versionMinor}.${versionPatch}-beta${versionBuild}"
            resValue "string", "app_name", "GnuCash beta"
            resValue "string", "app_version_name", "${versionName}"

            if (project.hasProperty("RELEASE_DROPBOX_APP_KEY")) {
                buildConfigField "String", "DROPBOX_APP_KEY", "\"${RELEASE_DROPBOX_APP_KEY}\""
                manifestPlaceholders.dropbox_app_key = "db-${RELEASE_DROPBOX_APP_KEY}"
            } else {
                buildConfigField "String", "DROPBOX_APP_KEY", "\"dhjh8ke9wf05948\""
                manifestPlaceholders.dropbox_app_key = "db-dhjh8ke9wf05948"
            }

            buildConfigField "boolean", "GOOGLE_GCM", "true"
            ext.useGoogleGcm = true
        }

        production {
            buildConfigField "boolean", "CAN_REQUEST_RATING", "true"
            resValue "string", "app_name", "GnuCash"

            if (project.hasProperty("RELEASE_DROPBOX_APP_KEY")) {
                buildConfigField "String", "DROPBOX_APP_KEY", "\"${RELEASE_DROPBOX_APP_KEY}\""
                manifestPlaceholders.dropbox_app_key = "db-${RELEASE_DROPBOX_APP_KEY}"
            } else {
                buildConfigField "String", "DROPBOX_APP_KEY", "\"dhjh8ke9wf05948\""
                manifestPlaceholders.dropbox_app_key = "db-dhjh8ke9wf05948"
            }

            buildConfigField "boolean", "GOOGLE_GCM", "true"
            ext.useGoogleGcm = true
        }
    }

    buildFeatures {
        viewBinding true
    }

    bundle {
        language {
            // This is disabled so that the App Bundle does NOT split the APK for each language.
            // We're gonna use the same APK for all languages.
            enableSplit false
        }
    }

    compileOptions { //we want switch with strings during xml parsing
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    namespace 'org.gnucash.android'

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

afterEvaluate {
    apply plugin: 'spoon'
    spoon {
        debug = true
        grantAllPermissions = true
        codeCoverage = true
    }
}

dependencies {
    // Jetpack
    implementation('androidx.appcompat:appcompat:1.7.0')
    implementation('com.google.android.material:material:1.12.0')
    implementation('androidx.cardview:cardview:1.0.0')
    implementation('androidx.preference:preference-ktx:1.2.1')
    implementation('androidx.recyclerview:recyclerview:1.3.2')
    implementation("androidx.work:work-runtime-ktx:2.10.0")

    implementation 'net.objecthunter:exp4j:0.4.7'
    implementation 'com.ezylang:EvalEx:3.2.0'
    implementation 'androidx.drawerlayout:drawerlayout:1.2.0'

    implementation 'com.google.android.gms:play-services-drive:17.0.0'

    // Logging
    implementation 'com.google.firebase:firebase-crashlytics:19.3.0'
    implementation "com.jakewharton.timber:timber:5.0.1"

    implementation 'com.github.nextcloud:android-library:1.0.31'
    implementation 'com.squareup:android-times-square:1.6.5@aar'
    implementation 'com.github.PhilJay:MPAndroidChart:2.2.4'

    implementation 'joda-time:joda-time:2.13.0'
    implementation 'org.apache.jackrabbit:jackrabbit-webdav:2.13.3'
    implementation 'com.code-troopers.betterpickers:library:3.1.0'
    implementation 'com.github.techfreak:wizardpager:1.0.3'
    implementation 'com.dropbox.core:dropbox-core-sdk:3.0.3'
    implementation 'com.kobakei:ratethisapp:0.0.7'

    // Export
    implementation("com.opencsv:opencsv:5.9") {
        exclude group: "commons-logging", module: "commons-logging"
    }

    // Debug
    debugImplementation 'com.facebook.stetho:stetho:1.5.0'

    testImplementation 'org.robolectric:robolectric:4.14.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.26.3'

    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test:rules:1.6.1'

    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'

    def androidEspressoVersion = "3.6.1"
    androidTestImplementation 'androidx.test.espresso:espresso-core:' + androidEspressoVersion
    androidTestImplementation 'androidx.test.espresso:espresso-intents:' + androidEspressoVersion
    androidTestImplementation('androidx.test.espresso:espresso-contrib:' + androidEspressoVersion)

    androidTestImplementation 'org.assertj:assertj-core:3.26.3'

    androidTestImplementation 'com.squareup.spoon:spoon-client:1.7.1'
}

// Disable Google Services plugin for some flavors.
afterEvaluate {
    android.productFlavors.each { flavor ->
        def flavorName = flavor.name.capitalize()
        tasks.matching { task ->
            task.name.contains("GoogleServices") && task.name.contains(flavorName)
        }.forEach { task ->
            task.enabled = flavor.ext.useGoogleGcm
        }
    }
}