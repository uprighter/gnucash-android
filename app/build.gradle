/**
 * The first line in the build configuration applies the Android Gradle plugin
 * to this build and makes the android block available to specify
 * Android-specific build options.
 */

plugins {
    id 'com.android.application'
    id 'com.google.firebase.crashlytics'
    id 'com.google.gms.google-services'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

import java.text.SimpleDateFormat

def versionMajor = 2
def versionMinor = 4
def versionPatch = 1
def versionBuild = 0

static def buildTime() {
    def df = new SimpleDateFormat("yyyyMMdd HH:mm 'UTC'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

static def gitSha() {
    return 'git rev-parse --short HEAD'.execute().getText().trim()
}

kotlin {
    jvmToolchain 17
}

/**
 * The android block is where you configure all your Android-specific
 * build options.
 */

android {
    compileSdk 34
    namespace 'org.gnucash.android'
    defaultConfig {
        applicationId "org.gnucash.android"
        testApplicationId 'org.gnucash.android.test'
        minSdkVersion 33
        versionCode versionMajor * (10**9) + versionMinor * (10**6) + versionPatch * (10**3) + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        resValue "string", "app_version_name", "${versionName}"
        resValue "string", "app_minor_version", "${versionMinor}"
        buildConfigField "boolean", "CAN_REQUEST_RATING", "false"
        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""

        multiDexEnabled true
        testInstrumentationRunner "org.gnucash.android.test.ui.util.GnucashAndroidTestRunner"

    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            enableUnitTestCoverage true
            enableAndroidTestCoverage true
        }
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/NOTICE', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'LICENSE.txt', 'META-INF/NOTICE.txt']
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            outputFileName = "GnucashAndroid_v${variant.versionName}.apk"
        }
    }

    signingConfigs {
        debug {
            storeFile file("../debug.keystore")
        }

        if (project.hasProperty("RELEASE_STORE_FILE")) {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    flavorDimensions = ["stability"]
    productFlavors {
        development {
            applicationId 'org.gnucash.android.devel'
            testApplicationId 'org.gnucash.android.devel.test'
            resValue "string", "app_name", "GnuCash-devel"
            versionName "${versionMajor}.${versionMinor}.${versionPatch}-dev${versionBuild}_r${gitSha()}"
            resValue "string", "app_version_name", "${versionName}"
        }

        beta {
            resValue "string", "app_name", "GnuCash - beta"
            versionName "${versionMajor}.${versionMinor}.${versionPatch}-beta${versionBuild}"
            resValue "string", "app_version_name", "${versionName}"
        }

        production {
            resValue "string", "app_name", "GnuCash"
            buildConfigField "boolean", "CAN_REQUEST_RATING", "true"
        }
    }

    compileOptions { //we want switch with strings during xml parsing
        encoding = "UTF-8"
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    lint {
        abortOnError false
    }
    buildFeatures {
        viewBinding true
        dataBinding true
        buildConfig true
    }
    allprojects {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation(
            'androidx.appcompat:appcompat:1.7.0',
            'androidx.cardview:cardview:1.0.0',
            'androidx.drawerlayout:drawerlayout:1.2.0',
            'androidx.preference:preference:1.2.1',
            'androidx.recyclerview:recyclerview:1.3.2',
            'com.google.android.material:material:1.12.0',
    )

    implementation platform('com.google.firebase:firebase-bom:33.2.0')
    implementation 'com.google.firebase:firebase-analytics:22.1.0'
    implementation 'com.google.firebase:firebase-crashlytics:19.0.3'
    implementation 'com.google.android.gms:play-services-drive:17.0.0'

    implementation 'net.objecthunter:exp4j:0.4.8'

    implementation 'joda-time:joda-time:2.12.7'

    implementation 'com.github.techfreak:wizardpager:1.0.3'
    implementation 'com.github.PhilJay:MPAndroidChart:v2.1.3'
    implementation 'com.maltaisn:recurpicker:2.1.7'
    implementation 'com.squareup:android-times-square:1.7.11'

    debugImplementation 'com.facebook.stetho:stetho:1.6.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.26.3'
    testImplementation 'org.robolectric:robolectric:4.13'
    testImplementation 'org.robolectric:shadows-multidex:4.13'
}

def androidEspressoVersion = "3.5.1"
dependencies {
    //the following are only added so that the app and test version both us the same versions
    androidTestImplementation 'com.google.android.material:material:1.12.0'

    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'

    androidTestImplementation 'androidx.test.espresso:espresso-core:' + androidEspressoVersion
    androidTestImplementation 'androidx.test.espresso:espresso-intents:' + androidEspressoVersion
    androidTestImplementation('androidx.test.espresso:espresso-contrib:' + androidEspressoVersion) {
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }

    androidTestImplementation 'com.squareup.spoon:spoon-client:1.7.1'
    androidTestImplementation('com.squareup.assertj:assertj-android:1.2.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

afterEvaluate {
    apply plugin: 'spoon'
    spoon {
        debug = true
        grantAllPermissions = true
        codeCoverage = true
    }
}